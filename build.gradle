group 'com.natpryce'
version(hasProperty("-version") ? property("-version") : "SNAPSHOT")

println "building version ${version}"


buildscript {
    ext.kotlin_version = '1.0.0-rc-1036'
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.6"
    }
}

apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven'
apply plugin: 'signing'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile 'junit:junit:4.12'
    testCompile 'com.natpryce:hamkrest:SNAPSHOT'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'konfig',
                'Implementation-Vendor': 'com.natpryce',
                'Implementation-Version': version
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}


dokka {
    outputFormat 'javadoc'
    outputDirectory 'build/javadoc'
}

task javadocJar(type: Jar, dependsOn: 'dokka') {
    classifier 'javadoc'
    from 'build/javadoc'
}

test {
    include 'com/natpryce/konfig/**'
    scanForTestClasses true
    reports {
        junitXml.enabled = true
        html.enabled = true
    }

    beforeTest { desc ->
        print "${desc.className.substring("com.natpryce.konfig.".length())}: ${desc.name.replace("_", " ")}"
    }
    afterTest { desc, result ->
        println " -> ${result.resultType}"
    }
}

artifacts {
    archives sourcesJar, javadocJar
}

signing {
    required { hasProperty("sign") || gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

task ossrhAuthentication << {
    if (!(project.hasProperty('ossrh.username') && project.hasProperty('ossrh.password'))) {
        throw new InvalidUserDataException("no OSSRH username and/or password!")
    }
}

uploadArchives {
    dependsOn ossrhAuthentication

    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: project.properties["ossrh.username"],
                        password: project.properties["ossrh.password"])
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: project.properties["ossrh.username"],
                        password: project.properties["ossrh.password"])
            }

            pom.project {
                name 'Konfig'
                packaging 'jar'
                description 'Konfiguration for Cotlin... no, Configuration for Kotlin'
                url 'https://github.com/npryce/konfig'

                scm {
                    connection 'git@github.com:npryce/konfig.git'
                    url 'https://github.com/npryce/konfig'
                }

                licenses {
                    license {
                        name 'Apache 2.0'
                        url 'http://opensource.org/licenses/Apache-2.0'
                    }
                }

                developers {
                    developer {
                        id 'npryce'
                        name 'Nat Pryce'
                    }
                    developer {
                        id 'dmcg'
                        name 'Duncan McGregor'
                    }
                }
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

